name: PANDUH-PARTY (üõ†Ô∏è Build NGINX (Stable + QUIC + Mods) üöÄüï∂Ô∏èüíæ)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-nginx:
    runs-on: ubuntu-latest
    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: 1.27.0
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: ‚ö° Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üóÇÔ∏è Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/ci.yml') }}

      - name: üêå Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ env.NGINX_VERSION }}-${{ env.OPENSSL_VERSION }}

      - name: üõ†Ô∏è Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf automake libtool pkg-config \
            libpcre3 libpcre3-dev libxml2 libxml2-dev libcurl4-openssl-dev \
            libyajl-dev liblmdb-dev lua5.3 liblua5.3-dev libgeoip-dev \
            git wget unzip zlib1g-dev cmake checkinstall ccache
          sudo rm -rf /var/lib/apt/lists/*

      - name: üêº Clone & Cache ModSecurity
        uses: actions/cache@v4
        with:
          path: ModSecurity
          key: modsecurity-v4-${{ hashFiles('**/ci.yml') }}
      - run: |
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git || echo "Using cached"
          cd ModSecurity
          git submodule update --init --recursive

      - name: üî® Build ModSecurity
        run: |
          cd ModSecurity
          autoreconf -fi
          ./configure
          make -j$(nproc)
          sudo make install
          cd ..

      - name: üåê Download & Cache NGINX Source
        uses: actions/cache@v4
        with:
          path: nginx-${{ env.NGINX_VERSION }}.tar.gz
          key: nginx-${{ env.NGINX_VERSION }}
      - run: |
          wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -O nginx-${NGINX_VERSION}.tar.gz || echo "Using cached"
          tar -xzf nginx-${NGINX_VERSION}.tar.gz
          mv nginx-${NGINX_VERSION} nginx

      - name: üîß Configure & Build NGINX + Modules
        run: |
          cd nginx
          ./auto/configure \
            --with-cc-opt="-O2 -march=native -fstack-protector-strong -D_FORTIFY_SOURCE=2" \
            --with-ld-opt="-Wl,-z,relro,-z,now" \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --with-http_image_filter_module \
            --with-http_videodownload_module \
            --with-http_slice_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" )
          make -j$(nproc)
          sudo make install
          cd ..

      - name: üß™ Test NGINX Build
        run: |
          sudo /usr/local/nginx/sbin/nginx -t || exit 1

      - name: üì¶ Package as DEB
        run: |
          cd nginx
          sudo checkinstall --install=no --pkgname=nginx-panduh-party --pkgversion=${NGINX_VERSION} --backup=no --deldoc=yes --fstrans=no --default
          mv nginx-panduh-party_${NGINX_VERSION}-1_amd64.deb ../
          cd ..
