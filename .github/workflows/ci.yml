name: üêº NGINX-PARTY CI Build üöÄ

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: latest
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: ‚ö° Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Install build dependencies
        run: |
          echo "Installing all required packages..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            libpcre3 libpcre3-dev \
            libxml2 libxml2-dev \
            libcurl4-openssl-dev \
            libyajl-dev \
            liblmdb-dev \
            lua5.3 liblua5.3-dev \
            libgeoip-dev \
            git wget unzip zlib1g-dev cmake curl

      - name: üêº Clone ModSecurity
        if: env.ENABLE_MODSEC == 'true'
        run: |
          echo "Cloning SpiderLabs/ModSecurity..."
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git
          cd ModSecurity
          git submodule init
          git submodule update --recursive

      - name: üî® Build ModSecurity
        if: env.ENABLE_MODSEC == 'true'
        run: |
          cd ModSecurity
          echo "Preparing build scripts..."
          autoreconf -fi
          ./configure
          make -j$(nproc)
          sudo make install
          cd ..
          echo "‚úÖ ModSecurity ninja-panda installed!"

      - name: üåê Download NGINX source
        run: |
          echo "Fetching latest NGINX source..."
          wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -O nginx.tar.gz
          mkdir nginx
          tar -xzf nginx.tar.gz -C nginx --strip-components=1

      - name: üîß Build NGINX with modules
        run: |
          cd nginx
          echo "Building NGINX with SSL, QUIC, caching, streams, and ModSecurity..."
          ./auto/configure \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --add-module=../ModSecurity/nginx/modsecurity \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex
          make -j$(nproc)
          sudo make install
          cd ..
          echo "üêº NGINX + ModSecurity cyberpunk build complete!"

      - name: üñºÔ∏è Test Media Modules
        run: |
          echo "Optional: testing WebP/AVIF support..."
          # placeholder for optional media module tests

      - name: üîç Debug Info
        run: |
          echo "NGINX version and modules:"
          nginx -V || echo "‚ö†Ô∏è NGINX binary missing"
          echo "Listing installed libraries..."
          ldd /usr/local/nginx/sbin/nginx || echo "‚ö†Ô∏è NGINX binary missing"

      - name: üéÅ Save modular artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-artifacts
          path: |
            nginx
            ngx_brotli
            ngx_cache_purge
            ngx-fancyindex
