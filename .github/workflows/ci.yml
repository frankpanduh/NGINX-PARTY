name: üêº‚ö° NGINX-PARTY .deb Build ‚Äî Cyberpunk Panda CI

on:
  push:
    branches: [ main ]
  pull_request:

env:
  ENABLE_MODSEC: "true"
  MODSEC_MODE: "DetectionOnly"     # 'On' to block; 'DetectionOnly' to log
  OPENSSL_VERSION: "3.3.1"         # OpenSSL >=3.2 has QUIC; 3.3.x is fine

jobs:
  build-deb:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repo (submodules if any)
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: üß∞ Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool cmake checkinstall \
            pkg-config git curl wget ca-certificates unzip \
            zlib1g-dev libpcre3-dev libxml2-dev libxslt1-dev \
            libgd-dev libgeoip-dev \
            libmaxminddb0 libmaxminddb-dev mmdb-bin \
            libzstd-dev \
            libyajl-dev liblmdb-dev libcurl4-openssl-dev \
            liblua5.3-dev libfuzzy-dev doxygen

      - name: üõ°Ô∏è Fetch OpenSSL (${OPENSSL_VERSION}) for QUIC/HTTP3
        run: |
          curl -LO "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
          tar xzf "openssl-${OPENSSL_VERSION}.tar.gz"

      - name: üåê Clone NGINX (auto-select latest release tag)
        run: |
          git clone https://github.com/nginx/nginx.git
          cd nginx
          LATEST_TAG="$(git tag -l 'release-*' | sort -V | tail -n1)"
          echo "Latest NGINX tag: ${LATEST_TAG}"
          git checkout "${LATEST_TAG}"
          echo "NGX_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: üß© Clone third-party modules
        run: |
          # Brotli (Google) ‚Äî remember to pull its submodule
          git clone --depth 1 https://github.com/google/ngx_brotli.git
          (cd ngx_brotli && git submodule update --init --recursive)

          # Zstandard compression module
          git clone --depth 1 https://github.com/tokers/zstd-nginx-module.git

          # Useful extras
          git clone --depth 1 https://github.com/openresty/headers-more-nginx-module.git
          git clone --depth 1 https://github.com/FRiCKLE/ngx_cache_purge.git
          git clone --depth 1 https://github.com/aperezdc/ngx-fancyindex.git

          # GeoIP2 (HTTP + stream); we enable stream in core to satisfy linkage
          git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git

      - name: üß± (Optional) Build ModSecurity v3 core lib + connector
        if: env.ENABLE_MODSEC == 'true'
        run: |
          # Core engine
          git clone --depth 1 https://github.com/owasp-modsecurity/ModSecurity.git
          cd ModSecurity
          git submodule update --init --recursive
          ./build.sh
          ./configure
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
          cd ..

          # NGINX connector (module)
          git clone --depth 1 https://github.com/owasp-modsecurity/ModSecurity-nginx.git

      - name: ‚öôÔ∏è Configure & build NGINX (QUIC/HTTP3, stream, modules)
        run: |
          cd nginx

          CONFIG_ARGS="\
            --with-compat \
            --with-threads \
            --with-http_ssl_module \
            --with-http_v2_module \
            --with-http_v3_module \
            --with-http_gzip_static_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-pcre-jit \
            --with-openssl=../openssl-${OPENSSL_VERSION} \
            --add-module=../ngx_brotli \
            --add-module=../zstd-nginx-module \
            --add-module=../headers-more-nginx-module \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            --add-module=../ngx_http_geoip2_module \
          "

          if [ "${ENABLE_MODSEC}" = "true" ]; then
            CONFIG_ARGS="${CONFIG_ARGS} --add-module=../ModSecurity-nginx"
          fi

          echo "üî© Configure args:"
          echo "${CONFIG_ARGS}"

          ./auto/configure ${CONFIG_ARGS} \
            --with-cc-opt='-O2 -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security' \
            --with-ld-opt='-Wl,-z,relro,-z,now -L/usr/local/lib'

          make -j"$(nproc)"

      - name: üì¶ Package .deb with checkinstall
        run: |
          cd nginx
          # Use release tag (e.g., release-1.27.1) ‚Üí version like 1.27.1
          PKGVER="${NGX_TAG#release-}"
          sudo checkinstall --pkgname=nginx-party \
            --pkgversion="${PKGVER}" \
            --requires="libpcre3,libssl3,zlib1g" \
            --backup=no --deldoc=yes --fstrans=no --default

      - name: üîç Show build info
        run: |
          /usr/local/nginx/sbin/nginx -V || true
          ls -la nginx/*.deb || true

      - name: üöö Upload artifact (.deb)
        uses: actions/upload-artifact@v4
        with:
          name: nginx-party-deb
          path: nginx/*.deb
          if-no-files-found: error
          retention-days: 14

      - name: üßØ On failure: quick diag
        if: failure()
        run: |
          echo "üíÄ Build failed ‚Äî quick system diag:"
          uname -a
          df -h
          free -m
          (ldd /usr/local/nginx/sbin/nginx || echo 'nginx binary missing')
