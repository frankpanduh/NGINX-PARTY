name: üêº NGINX-PARTY CI Build üöÄ

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-nginx-modsec:
    runs-on: ubuntu-latest

    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: 1.27.0   # latest stable, or use 'mainline' if you want bleeding edge
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: ‚ö° Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Install dependencies
        run: |
          echo "Installing build essentials and ModSecurity deps..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config cmake \
            libpcre3 libpcre3-dev libpcre2-dev \
            libxml2 libxml2-dev libcurl4-openssl-dev \
            libyajl-dev liblmdb-dev lua5.3 liblua5.3-dev \
            libgeoip-dev git wget unzip zlib1g-dev curl

      - name: üêº Clone ModSecurity
        if: env.ENABLE_MODSEC == 'true'
        run: |
          echo "Cloning SpiderLabs/ModSecurity..."
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git
          cd ModSecurity
          git submodule update --init --recursive
          cd ..

      - name: üî® Build ModSecurity
        if: env.ENABLE_MODSEC == 'true'
        run: |
          cd ModSecurity
          echo "Preparing build scripts..."
          autoreconf -fi
          ./configure
          make -j$(nproc)
          sudo make install
          cd ..
          echo "‚úÖ ModSecurity ninja-panda installed!"

      - name: üì¶ Clone optional NGINX modules
        run: |
          echo "Cloning optional NGINX modules..."
          git clone --depth 1 https://github.com/google/ngx_brotli.git
          git clone --depth 1 https://github.com/FRiCKLE/ngx_cache_purge.git
          git clone --depth 1 https://github.com/aperezdc/ngx-fancyindex.git
          cd ngx_brotli
          git submodule update --init --recursive
          cd ..

      - name: üåê Download & extract NGINX source
        run: |
          echo "Fetching NGINX ${NGINX_VERSION} source..."
          wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -O nginx.tar.gz
          mkdir nginx
          tar -xzf nginx.tar.gz -C nginx --strip-components=1

      - name: üîß Build NGINX with modules & ModSecurity
        run: |
          cd nginx
          echo "Configuring NGINX build..."
          ./auto/configure \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" )
          echo "Building NGINX..."
          make -j$(nproc)
          sudo make install
          cd ..
          echo "üöÄ NGINX + ModSecurity build complete ‚Äî panda style!"

      - name: üîç Debug Info
        run: |
          nginx -V || echo "‚ö†Ô∏è NGINX binary missing"
          echo "Listing installed libraries for NGINX..."
          ldd /usr/local/nginx/sbin/nginx || echo "‚ö†Ô∏è NGINX binary missing"
          uname -a
          df -h
          free -m

      - name: üéÅ Save Modular Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-artifacts
          path: |
            nginx
            ngx_brotli
            ngx_cache_purge
            ngx-fancyindex
            ModSecurity
