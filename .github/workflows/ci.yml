name: Build NGINX-PARTY .deb 🚀

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository 📥
        uses: actions/checkout@v3

      - name: Install dependencies 🔧
        run: |
          echo "⚡ Installing build dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev wget git \
            debhelper dh-make checkinstall
          echo "✅ Dependencies installed! 🎉"

      - name: Clone NGINX 🌐
        run: |
          echo "🐚 Cloning NGINX mainline..."
          git clone https://github.com/nginx/nginx.git nginx || { echo "💥🐛 ERROR: Could not clone nginx!"; exit 1; }
          cd nginx
          git checkout master || { echo "💥🐛 ERROR: Could not checkout master branch!"; exit 1; }
          echo "✅ NGINX cloned successfully! 🚀"

      - name: Clone QUIC module ⚡
        run: |
          echo "🐚 Cloning Cloudflare quiche..."
          git clone --recursive -b main https://github.com/cloudflare/quiche.git ../nginx-quic || { echo "💥🐛 ERROR: Could not clone quiche!"; exit 1; }
          echo "✅ QUIC module cloned successfully! 🌈"

      - name: Configure & Build NGINX 🔨
        run: |
          cd nginx
          wget https://www.openssl.org/source/openssl-3.1.4.tar.gz || { echo "💥🐛 OpenSSL download failed!"; exit 1; }
          tar xzf openssl-3.1.4.tar.gz || { echo "💥🐛 OpenSSL extract failed!"; exit 1; }

          ./auto/configure \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-openssl=./openssl-3.1.4 \
            --add-module=../nginx-quic \
            --with-stream \
            --with-cc-opt='-O2 -g' \
            --with-ld-opt='-Wl,-rpath,/usr/local/lib' || { echo "💥🐛 Configure failed!"; exit 1; }

          echo "⚡ Starting make..."
          if make -j$(nproc); then
            echo "🎉 Build successful! 🌟"
          else
            echo "💥🐛 Build failed! Check logs carefully. ⚠️" >&2
            exit 1
          fi

      - name: Create .deb package 📦
        run: |
          cd nginx
          echo "⚡ Creating .deb package..."
          checkinstall --install=no --pkgname=nginx-party --pkgversion=1.0 \
            --backup=no --fstrans=no --default make install || { echo "💥🐛 .deb packaging failed!"; exit 1; }
          echo "✅ .deb package ready! 🎉"

      - name: Upload .deb artifact 🚀
        uses: actions/upload-artifact@v4
        with:
          name: nginx-party-deb
          path: ./nginx/nginx-party_1.0-1_amd64.deb
          retention-days: 7
