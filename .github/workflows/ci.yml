name: üêº NGINX-PARTY CI ‚ö°‚ú®

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-nginx-modsec:
    runs-on: ubuntu-latest

    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: latest
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: ‚ö° Checkout NGINX-PARTY
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üîç Preflight: Check optional dependencies
        shell: bash
        run: |
          echo "üêº Running preflight dependency check..."
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config \
            libpcre3 libpcre3-dev zlib1g-dev libssl-dev \
            libxml2 libxml2-dev libgeoip-dev libcurl4-openssl-dev \
            libyajl-dev liblmdb-dev lua5.3 liblua5.3-dev \
            git wget unzip cmake curl python3 python3-pip rustc cargo || true
          echo "‚úÖ Preflight complete ‚Äî dependencies installed if available."

      - name: üêº Clone ModSecurity
        if: env.ENABLE_MODSEC == 'true'
        run: |
          echo "üõ°Ô∏è Pulling SpiderLabs/ModSecurity..."
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git
          cd ModSecurity
          git submodule init
          git submodule update --recursive

      - name: üî® Build ModSecurity
        if: env.ENABLE_MODSEC == 'true'
        shell: bash
        run: |
          cd ModSecurity
          echo "‚öôÔ∏è Preparing build scripts..."
          autoreconf -fi
          ./configure
          make -j$(nproc)
          sudo make install
          cd ..
          echo "‚úÖ ModSecurity ninja-panda installed!"

      - name: üåê Fetch NGINX source
        shell: bash
        run: |
          echo "üêº Downloading latest NGINX source..."
          NGX_TAG=$(curl -s http://nginx.org/en/download.html | grep -Eo 'nginx-[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Found latest NGINX tag: $NGX_TAG"
          mkdir -p nginx
          wget "http://nginx.org/download/$NGX_TAG.tar.gz" -O nginx.tar.gz
          tar -xzf nginx.tar.gz -C nginx --strip-components=1

      - name: ü¶æ Build NGINX with modules & optimizations
        shell: bash
        run: |
          cd nginx
          echo "üîß Building NGINX-PARTY with QUIC, SSL, Brotli, caching, threads, and media formats..."
          ./auto/configure \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" )
          make -j$(nproc)
          sudo make install
          echo "üêº NGINX-PARTY built ‚Äî panda speed unlocked! ‚ö°"

      - name: üñºÔ∏è Test media & modules
        shell: bash
        run: |
          echo "üñºÔ∏è Verifying WebP / AVIF / Brotli / ModSecurity modules..."
          nginx -V | tee /dev/stdout

      - name: üéÅ Save modular artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-artifacts
          path: |
            nginx
            ngx_brotli
            ngx_cache_purge
            ngx-fancyindex
            ModSecurity
