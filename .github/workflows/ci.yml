name: üõ†Ô∏è Build NGINX-PARTY Stable + QUIC + Mods

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NGINX_VERSION: 1.29.1
  OPENSSL_VERSION: 3.3.1
  ENABLE_MODSEC: true
  MODSEC_MODE: DetectionOnly

jobs:
  preflight:
    name: üíª Preflight - Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repo
        uses: actions/checkout@v4

      - name: üêß Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential git wget curl libpcre3-dev zlib1g-dev libssl-dev \
            libxml2-dev libxslt1-dev libgd-dev libgeoip-dev libtool automake \
            libyajl-dev liblmdb-dev libluajit-5.1-dev \
            php8.3-cli php8.3-fpm mariadb-client composer redis-server \
            ccache unzip tar fakeroot devscripts dh-make
          sudo rm -rf /var/lib/apt/lists/*

      - name: üîß Confirm Build Tools
        run: |
          gcc --version
          make --version
          php -v
          redis-server --version

  build:
    name: üöÄ Build NGINX-PARTY
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: üì• Checkout Repo
        uses: actions/checkout@v4

      - name: üåê Clone NGINX & Modules
        run: |
          git clone --depth 1 https://github.com/nginx/nginx.git -b release-$NGINX_VERSION nginx-$NGINX_VERSION-src
          git clone --depth 1 https://github.com/google/ngx_brotli.git
          git clone --depth 1 https://github.com/FRiCKLE/ngx_cache_purge.git
          git clone --depth 1 https://github.com/aperezdc/ngx-fancyindex.git
          if [ "$ENABLE_MODSEC" == "true" ]; then
            git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git
          fi

      - name: üîí Configure & Build NGINX
        run: |
          cd nginx-$NGINX_VERSION-src
          if [ ! -f "./auto/configure" ]; then
            echo "‚ùå nginx/auto/configure missing!"
            exit 1
          fi
          ./auto/configure \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --with-http_image_filter_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" ) \
            --with-http_stub_status_module \
            --with-file-aio \
            --with-cc-opt="-O2 -g -fstack-protector-strong" \
            --with-ld-opt="-Wl,-z,relro,-z,now"
          make -j$(nproc)
          sudo make install
          cd ..
          echo "üöÄ NGINX + Mods Build Complete!"

      - name: üì¶ Create DEB Package
        run: |
          cd nginx-$NGINX_VERSION-src
          sudo checkinstall --install=no --pkgname=nginx-party --pkgversion=$NGINX_VERSION --backup=no --deldoc=yes --fstrans=no --default
          mv *.deb ../
          cd ..
          echo "üì¶ DEB Package Ready!"

  release:
    name: üõ∞Ô∏è Release NGINX-PARTY
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üì• Checkout Repo
        uses: actions/checkout@v4

      - name: üì§ Upload Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: '*.deb'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx-party:stable
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nginx-party:stable