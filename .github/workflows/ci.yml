name: "PANDUH-PARTY üêº‚ö°üåê (Build NGINX Stable + QUIC + Mods)"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  NGINX_VERSION: "1.26.2"          # stable pin (main branch)
  ENABLE_MODSEC: "true"
  ENABLE_RTMP: "false"             # set "true" to include nginx-rtmp-module
  ENABLE_FANCYINDEX: "true"        # set "false" to skip fancy index
  CCACHE_DIR: "${{ github.workspace }}/.ccache"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout (submodules ready)
        uses: actions/checkout@v4

      # ---------- SPEED BOOSTS ----------
      - name: üß† Cache APT (.deb archives)
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/ci.yml') }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: üß† Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.NGINX_VERSION }}
          restore-keys: |
            ccache-${{ runner.os }}-

      # ---------- BUILD DEPS ----------
      - name: ‚öôÔ∏è Install build deps (secure & media-capable)
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential ccache git wget curl ca-certificates \
            autoconf automake libtool pkg-config \
            libpcre3 libpcre3-dev libpcre2-dev \
            zlib1g zlib1g-dev libxslt1-dev \
            libgd-dev libwebp-dev libavif-dev \
            libxml2-dev libgeoip-dev libmaxminddb0 libmaxminddb-dev mmdb-bin \
            libyajl-dev libcurl4-openssl-dev liblmdb-dev \
            uuid-dev cmake \
            rustc cargo
          sudo rm -rf /var/lib/apt/lists/*  # keep runners tidy

      # ---------- SOURCE FETCH (CACHED) ----------
      - name: üß† Cache NGINX source tarball
        uses: actions/cache@v4
        with:
          path: nginx-${{ env.NGINX_VERSION }}.tar.gz
          key: nginx-src-${{ env.NGINX_VERSION }}

      - name: üåê Fetch NGINX (stable pin)
        run: |
          if [ ! -f "nginx-${NGINX_VERSION}.tar.gz" ]; then
            echo "Downloading nginx-${NGINX_VERSION}.tar.gz ‚Ä¶"
            curl -fsSL "http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz" -o "nginx-${NGINX_VERSION}.tar.gz"
          fi
          tar -xzf "nginx-${NGINX_VERSION}.tar.gz"
          if [ ! -d "nginx-${NGINX_VERSION}/auto" ]; then
            echo "‚ùå Extraction failed: ./auto not found"; exit 1
          fi
          mv "nginx-${NGINX_VERSION}" nginx

      - name: üîí Fetch OpenSSL (QUIC/HTTP3: quictls)
        run: |
          git clone --depth 1 https://github.com/quictls/openssl.git openssl

      - name: üåÄ Fetch ngx_brotli (recursive)
        run: |
          git clone --recursive https://github.com/google/ngx_brotli.git

      - name: üßº Fetch cache purge
        run: |
          git clone --depth 1 https://github.com/FRiCKLE/ngx_cache_purge.git

      - name: üìÅ (opt) Fetch fancyindex
        if: env.ENABLE_FANCYINDEX == 'true'
        run: |
          git clone --depth 1 https://github.com/aperezdc/ngx-fancyindex.git

      - name: üì° (opt) Fetch RTMP
        if: env.ENABLE_RTMP == 'true'
        run: |
          git clone --depth 1 https://github.com/arut/nginx-rtmp-module.git

      # ---------- MODSECURITY CORE + CONNECTOR ----------
      - name: üõ°Ô∏è Fetch ModSecurity v3 core
        if: env.ENABLE_MODSEC == 'true'
        run: |
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git ModSecurity
          cd ModSecurity
          git submodule update --init --recursive

      - name: üîß Build & Install ModSecurity core
        if: env.ENABLE_MODSEC == 'true'
        run: |
          set -euxo pipefail
          cd ModSecurity
          autoreconf -fi
          ./configure
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
          echo "‚úÖ ModSecurity core installed"

      - name: üõ°Ô∏è Fetch ModSecurity NGINX connector
        if: env.ENABLE_MODSEC == 'true'
        run: |
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git modsecurity-nginx

      # ---------- CONFIGURE & BUILD NGINX ----------
      - name: üß© Configure NGINX (QUIC + media + modules)
        run: |
          set -euxo pipefail
          cd nginx

          # Use ccache for speed
          export CC="ccache gcc"
          export CXX="ccache g++"
          mkdir -p "$CCACHE_DIR"
          ccache -z || true

          # Build-time hardening + perf
          CCOPT="-O3 -pipe -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIC -Wformat -Werror=format-security"
          LDOPT="-Wl,-z,relro -Wl,-z,now -pie"

          CONFIG_FLAGS="
            --prefix=/etc/nginx
            --sbin-path=/usr/sbin/nginx
            --modules-path=/usr/lib/nginx/modules
            --conf-path=/etc/nginx/nginx.conf
            --error-log-path=/var/log/nginx/error.log
            --http-log-path=/var/log/nginx/access.log
            --pid-path=/var/run/nginx.pid
            --lock-path=/var/run/nginx.lock
            --with-threads
            --with-http_ssl_module
            --with-http_v2_module
            --with-http_v3_module
            --with-http_gzip_static_module
            --with-http_stub_status_module
            --with-http_sub_module
            --with-http_realip_module
            --with-http_image_filter_module
            --with-stream
            --with-stream_ssl_module
            --with-openssl=../openssl
            --with-cc-opt=\"${CCOPT}\"
            --with-ld-opt=\"${LDOPT}\"
            --add-module=../ngx_brotli
            --add-module=../ngx_cache_purge
          "

          # Optional modules
          if [ "${ENABLE_FANCYINDEX}" = "true" ]; then
            CONFIG_FLAGS="${CONFIG_FLAGS} --add-module=../ngx-fancyindex"
          fi
          if [ "${ENABLE_RTMP}" = "true" ]; then
            CONFIG_FLAGS="${CONFIG_FLAGS} --add-module=../nginx-rtmp-module"
          fi
          if [ "${ENABLE_MODSEC}" = "true" ]; then
            CONFIG_FLAGS="${CONFIG_FLAGS} --add-module=../modsecurity-nginx"
          fi

          echo "üõ†Ô∏è ./configure ${CONFIG_FLAGS}"
          eval ./configure ${CONFIG_FLAGS}

      - name: üèóÔ∏è Build NGINX
        run: |
          set -euxo pipefail
          cd nginx
          make -j"$(nproc)"
          ./objs/nginx -V || true
          ccache -s || true

      # ---------- ARTIFACTS ----------
      - name: üì¶ Upload NGINX binary + objs
        uses: actions/upload-artifact@v4
        with:
          name: panduh-party-nginx-${{ env.NGINX_VERSION }}
          path: |
            nginx/objs/nginx
            nginx/objs/*
          if-no-files-found: error
