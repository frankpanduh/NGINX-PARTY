name: 🚀 NGINX-PARTY CI Build 🐼

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: latest
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: 🐼 Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 🛠 Setup Dependencies
        run: |
          echo "💾 Installing build essentials, Rust, Python3, CMake, and ninja-panda powers..."
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libpcre3 libpcre3-dev zlib1g-dev libssl-dev \
            git curl wget autoconf automake libtool pkg-config rustc cargo python3 python3-pip

      - name: 📦 ModSecurity Submodules 🛡️
        if: env.ENABLE_MODSEC == 'true'
        run: |
          echo "🐼 Cloning ModSecurity dojo..."
          if [ ! -d "ModSecurity" ]; then
            git clone --recursive https://github.com/SpiderLabs/ModSecurity.git
          fi
          cd ModSecurity
          echo "🛠 Preparing ModSecurity build scripts..."
          autoreconf -fi
          ./configure
          make -j$(nproc)
          sudo make install
          cd ..
          echo "✅ ModSecurity ninja-panda installed!"

      - name: 🐙 Build NGINX
        run: |
          echo "🔧 Building NGINX with web media powers, QUIC, SSL, caching, stream, and threads..."
          cd nginx
          ./auto/configure \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex
          make -j$(nproc)
          sudo make install
          cd ..
          echo "🐼 NGINX built and installed — panda speed unlocked!"

      - name: 🖼️ Test Media Modules
        run: |
          echo "🖼️ Checking WebP / AVIF / Brotli support..."
          nginx -V | grep -E "ngx_http_brotli_module|webp|avif" || echo "⚠️ Some media modules may be missing"

      - name: 🔍 Debug Info & Build Logs
        run: |
          echo "🔎 NGINX Version + Modules:"
          nginx -V
          echo "📦 Linked libraries:"
          ldd /usr/local/nginx/sbin/nginx
          echo "📝 NGINX logs (if present):"
          [ -f /usr/local/nginx/logs/error.log ] && tail -n 20 /usr/local/nginx/logs/error.log || echo "No logs yet"

      - name: 🐞 Optional Debug Hook
        if: failure()
        run: |
          echo "💀 Build failed! Dumping recent sys info for debugging:"
          uname -a
          df -h
          free -m
          ldd /usr/local/nginx/sbin/nginx || echo "nginx binary missing"

      - name: 🎁 Save Modular Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-artifacts
          path: |
            nginx
            ngx_brotli
            ngx_cache_purge
            ngx-fancyindex
