name: üõ†Ô∏è PANDUH-PARTY (Build NGINX 1.29.1 Stable + QUIC + Mods) ‚ö°üåêüï∂Ô∏è

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-nginx-modsec:
    runs-on: ubuntu-latest
    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: 1.29.1
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: üêº Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ===== Cache apt packages =====
      - name: üíæ Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/ci.yml') }}

      - name: üõ†Ô∏è Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential autoconf automake libtool pkg-config \
            libpcre3 libpcre3-dev libxml2 libxml2-dev libcurl4-openssl-dev \
            libyajl-dev liblmdb-dev lua5.3 liblua5.3-dev libgeoip-dev git wget unzip zlib1g-dev rustc cargo
          sudo rm -rf /var/lib/apt/lists/*

      # ===== Cache ModSecurity source =====
      - name: üíæ Cache ModSecurity
        uses: actions/cache@v4
        with:
          path: ModSecurity
          key: modsec-${{ hashFiles('**/ci.yml') }}

      - name: üêº Clone ModSecurity
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 https://github.com/SpiderLabs/ModSecurity.git
          cd ModSecurity
          git submodule init
          git submodule update --recursive
          cd ..

      # ===== Build ModSecurity =====
      - name: üî® Build ModSecurity
        run: |
          cd ModSecurity
          autoreconf -fi
          ./configure
          make -j$(nproc)
          sudo make install
          cd ..
          echo "‚úÖ ModSecurity installed!"

      # ===== Cache NGINX source =====
      - name: üíæ Cache NGINX source
        uses: actions/cache@v4
        with:
          path: nginx-${{ env.NGINX_VERSION }}
          key: nginx-src-${{ env.NGINX_VERSION }}

      - name: üåê Download & extract NGINX source
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Fetching NGINX ${NGINX_VERSION} source..."
          wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz -O nginx-${NGINX_VERSION}.tar.gz
          tar -xzf nginx-${NGINX_VERSION}.tar.gz
          mv nginx-${NGINX_VERSION} nginx-${NGINX_VERSION}-src

      # ===== Configure & Build NGINX =====
      - name: üîß Configure & Build NGINX with modules
        run: |
          cd nginx-${NGINX_VERSION}-src
          if [ ! -f "./auto/configure" ]; then
            echo "‚ùå nginx/auto/configure missing!"
            exit 1
          fi
          ./auto/configure \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --with-http_image_filter_module \
            --with-http_websocket_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" )
          make -j$(nproc)
          sudo make install
          cd ..
          echo "üöÄ NGINX + ModSecurity build complete ‚Äî panda style!"

      # ===== Cache compiled outputs (optional, ccache for future) =====
      - name: üíæ Cache NGINX build outputs
        uses: actions/cache@v4
        with:
          path: /usr/local/nginx
          key: nginx-build-${{ env.NGINX_VERSION }}
