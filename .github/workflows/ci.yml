name: üõ†Ô∏è CI - Build NGINX-PARTY

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NGINX_VERSION: 1.29.1
  OPENSSL_VERSION: 3.3.1
  ENABLE_MODSEC: true
  MODSEC_MODE: DetectionOnly

jobs:
  build:
    name: ‚ö° Build NGINX + Modules
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repo
        uses: actions/checkout@v4

      - name: üíª Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential git wget curl libpcre3-dev zlib1g-dev libssl-dev \
            libxml2-dev libxslt1-dev libgd-dev libgeoip-dev libtool automake \
            libyajl-dev liblmdb-dev libluajit-5.1-dev \
            php8.3-cli php8.3-fpm mariadb-client composer redis-server \
            ccache unzip tar
          sudo rm -rf /var/lib/apt/lists/*

      - name: üõ°Ô∏è Soft Preflight - Verify Modules
        run: |
          set -e
          # ModSecurity bootstrap
          if [ "$ENABLE_MODSEC" == "true" ]; then
            if [ ! -f "./ModSecurity/nginx/config" ]; then
              echo "‚ùå ModSecurity nginx module missing, bootstrapping..."
              cd ModSecurity
              git submodule update --init --recursive
              ./autogen.sh
              ./configure
              cd ..
            fi
          fi
          # Brotli check
          if [ ! -f "./ngx_brotli/deps/brotli/CMakeLists.txt" ]; then
            echo "‚ùå Brotli submodule missing or not initialized"
            exit 1
          fi
          echo "‚úÖ Soft preflight completed"

      - name: üåê Clone NGINX & Modules
        run: |
          git clone --depth 1 https://github.com/nginx/nginx.git -b release-${NGINX_VERSION} nginx-${NGINX_VERSION}-src
          git clone --depth 1 https://github.com/google/ngx_brotli.git
          git -C ngx_brotli submodule update --init --recursive
          git clone --depth 1 https://github.com/FRiCKLE/ngx_cache_purge.git
          git clone --depth 1 https://github.com/aperezdc/ngx-fancyindex.git

      - name: üîß Configure & Build NGINX
        run: |
          cd nginx-${NGINX_VERSION}-src
          ./auto/configure \
            --prefix=/usr/local/nginx \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v2_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_image_filter_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" ) \
            --with-http_secure_link_module \
            --with-http_realip_module \
            --with-http_slice_module \
            --with-http_stub_status_module \
            --with-http_auth_request_module \
            --with-file-aio
          make -j$(nproc)
          sudo make install
          cd ..
          echo "üöÄ NGINX-PARTY build complete"

      - name: üì¶ Package DEB
        run: |
          # Simple example, adjust paths as needed
          mkdir -p nginx-deb/DEBIAN
          echo "Package: nginx-party
Version: ${NGINX_VERSION}
Architecture: amd64
Maintainer: Frank Panduh <you@example.com>
Description: Custom NGINX-PARTY build with modules
" > nginx-deb/DEBIAN/control
          dpkg-deb --build nginx-deb

      - name: üì§ Upload Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: 'nginx-deb.deb'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx-party:stable
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nginx-party:stable