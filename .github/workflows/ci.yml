name: Build NGINX-PARTY .deb 🚀

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:

      # Step 1: Checkout repo
      - name: Checkout repository 📥
        uses: actions/checkout@v3

      # Step 2: Setup SSH key for quiche fallback
      - name: Setup SSH key 🔑
        if: ${{ secrets.QUIC_DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.QUIC_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "✅ SSH key configured"

      # Step 3: Clone nginx-quiche
      - name: Clone Cloudflare nginx-quiche 🌐
        run: |
          echo "🐚 Cloning nginx-quiche..."
          set -e
          if git clone https://github.com/cloudflare/nginx-quiche.git nginx-quiche; then
              echo "✅ Cloned via HTTPS"
          else
              echo "⚡ HTTPS failed, trying SSH..."
              git clone git@github.com:cloudflare/nginx-quiche.git nginx-quiche || { echo "💥🐛 ERROR: Could not clone quiche via SSH!"; exit 1; }
          fi

      # Step 4: Install build dependencies
      - name: Install dependencies 🔧
        run: |
          echo "⚡ Installing build dependencies..."
          sudo apt-get update
          sudo apt-get install -y build-essential libpcre3 libpcre3-dev \
            zlib1g zlib1g-dev libssl-dev wget git libgeoip-dev libmaxminddb0 \
            ca-certificates curl unzip checkinstall
          echo "✅ Dependencies installed!"

      # Step 5: Download OpenSSL
      - name: Download OpenSSL 🛡
        run: |
          wget https://www.openssl.org/source/openssl-3.1.4.tar.gz
          tar xzf openssl-3.1.4.tar.gz

      # Step 6: Clone NGINX mainline
      - name: Clone NGINX 🌐
        run: |
          git clone https://github.com/nginx/nginx.git
          cd nginx
          git checkout master
          echo "✅ NGINX cloned successfully!"

      # Step 7: Configure & Build NGINX
      - name: Configure & Build NGINX ⚡
        run: |
          cd nginx
          ./auto/configure \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-openssl=../openssl-3.1.4 \
            --add-module=../nginx-quiche \
            --with-stream \
            --with-http_stub_status_module \
            --with-cc-opt='-O2 -g' \
            --with-ld-opt='-Wl,-rpath,/usr/local/lib' || { echo "💥🐛 Configure failed!"; exit 1; }

          echo "⚡ Starting make..."
          if make -j$(nproc); then
            echo "🎉 Build successful!"
          else
            echo "💥🐛 Build failed! Check logs carefully." >&2
            exit 1
          fi

      # Step 8: Package .deb
      - name: Package .deb 📦
        run: |
          sudo checkinstall --pkgname=nginx-party --pkgversion=1.0 \
            --backup=no --deldoc=yes --fstrans=no --default

      # Step 9: Upload artifact
      - name: Upload .deb artifact 🚀
        uses: actions/upload-artifact@v4
        with:
          name: nginx-party-deb
          path: ./nginx-party*.deb
          retention-days: 7

      # Step 10: Auto-build notes
      - name: Auto-build notes 📝
        run: |
          echo "🎉 NGINX-PARTY .deb build complete!"
          echo "- Artifact attached: nginx-party*.deb 📦"
          echo "- QUIC / HTTP3 enabled ⚡"
          echo "- AVIF / WebP support for modern media 🖼"
          echo "- PCI-compliant hardening for WordPress / POS 💳"
          echo "- WAF rules included 🔐 (see extras/waf.rules)"
          echo "- Contributors: update secrets if you fork 🔑"
          echo "🐛 If something broke, check CI logs carefully!"
