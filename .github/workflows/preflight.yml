name: PANDUH-PARTY Preflight ‚ö°üï∂Ô∏èüíæ

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  preflight:
    runs-on: ubuntu-latest

    env:
      ENABLE_MODSEC: true
      MODSEC_MODE: DetectionOnly
      NGINX_VERSION: 1.27.0
      OPENSSL_VERSION: 3.3.1

    steps:
      - name: ‚ö° Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Verify Build Tools
        run: |
          echo "üîç Checking essential build tools..."
          for cmd in git wget tar cmake make gcc g++ checkinstall ccache; do
            command -v $cmd || { echo "$cmd missing!"; exit 1; }
          done

      - name: üêå Check ccache
        run: |
          echo "üåÄ Verifying ccache..."
          ccache -V || echo "ccache not found, will build without cache"

      - name: üêº Check ModSecurity
        run: |
          if [ "$ENABLE_MODSEC" == "true" ]; then
            if [ ! -d "ModSecurity" ]; then
              echo "ModSecurity source missing!"
              exit 1
            fi
            cd ModSecurity
            git submodule status
            autoreconf -fi
            ./configure || { echo "ModSecurity configure failed!"; exit 1; }
            make -j$(nproc)
            cd ..
            echo "‚úÖ ModSecurity preflight ok!"
          else
            echo "ModSecurity disabled"
          fi

      - name: üåê Check NGINX Source
        run: |
          if [ ! -d "nginx" ]; then
            echo "NGINX source missing! Download or clone first."
            exit 1
          fi
          cd nginx
          if [ ! -f "./auto/configure" ]; then
            echo "NGINX configure script missing!"
            exit 1
          fi
          echo "‚úÖ NGINX preflight ok!"
          cd ..

      - name: üîê Check OpenSSL
        run: |
          openssl version || { echo "OpenSSL missing or incompatible"; exit 1; }

      - name: üñºÔ∏è Check Modules & Optional Dependencies
        run: |
          for dep in lua yajl geoip pcre pcre2 lmdb ssdeep; do
            echo "Checking $dep..."
          done
          echo "‚ö° AVIF/WebP & streaming modules assumed available if built with proper flags"

      - name: üß™ Dry Build Test
        run: |
          echo "‚ö° Attempting dry NGINX configure..."
          cd nginx
          ./auto/configure \
            --with-cc-opt="-O2 -march=native -fstack-protector-strong -D_FORTIFY_SOURCE=2" \
            --with-ld-opt="-Wl,-z,relro,-z,now" \
            --with-compat \
            --with-http_ssl_module \
            --with-http_v3_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-threads \
            --with-http_gzip_static_module \
            --with-http_v2_module \
            --add-module=../ngx_brotli \
            --add-module=../ngx_cache_purge \
            --add-module=../ngx-fancyindex \
            $( [ "$ENABLE_MODSEC" == "true" ] && echo "--add-module=../ModSecurity/nginx/modsecurity" )
          echo "‚úÖ Dry build preflight ok!"
          cd ..

      - name: üóÇÔ∏è Environment Summary
        run: |
          echo "üñ•Ô∏è Runner Info:"
          uname -a
          lsb_release -a || true
          free -h
          df -h
          echo "üåÄ ccache stats:"
          ccache -s
